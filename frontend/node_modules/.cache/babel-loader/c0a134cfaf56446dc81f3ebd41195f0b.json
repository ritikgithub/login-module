{"ast":null,"code":"var _jsxFileName = \"/home/ritik.agarwal/Desktop/GL/login_module/frontend/src/pages/ForgotPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { IonButton, IonContent, IonHeader, IonInput, IonItem, IonLabel, IonLoading, IonPage, IonSpinner, IonTitle, IonToast, IonToolbar } from '@ionic/react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ForgotPassword = () => {\n  _s();\n\n  const [token, settoken] = useState(\"\");\n  const [email, setemail] = useState(\"\");\n  const [newpassword, setnewpassword] = useState(\"\");\n  const [confirmpassword, setconfirmpassword] = useState(\"\");\n  const [showToast, setshowToast] = useState(false);\n  const [toastMessage, settoastmessage] = useState(\"\");\n  const [toastType, settoastType] = useState(\"\");\n  const [emailSending, setemailSending] = useState(false);\n  const [emailSent, setemailSent] = useState(false);\n  const [passwordChanging, setpasswordChanging] = useState(false);\n  const [passwordChanged, setpasswordChanged] = useState(false);\n  let component;\n\n  function renderComponent() {\n    if (!(emailSending && emailSent)) component = sendToken();else if (emailSending) {\n      component = spinner();\n      console.log(component);\n    } else if (passwordChanged) component = passwordChangedSuccessfully();else if (emailSent) component = resetpassword();\n  }\n\n  renderComponent();\n\n  function sendTokenHandler() {\n    if (email == \"\") {\n      settoastType(\"danger\");\n      settoastmessage(\"Email should not be empty\");\n      setshowToast(true);\n      return;\n    }\n\n    let resStatus = 0;\n    setemailSending(true);\n    fetch(\"http://localhost:5000/sendForgotPasswordToken\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      })\n    }).then(res => {\n      resStatus = res.status;\n      return res.json();\n    }).then(res => {\n      if (resStatus == 200) {\n        settoastType(\"success\");\n        settoastmessage(res.message);\n        setshowToast(true);\n        setemailSent(true);\n        setemailSending(false);\n      } else {\n        settoastType(\"danger\");\n        settoastmessage(res.error);\n        setshowToast(true);\n        setemailSending(false);\n      }\n    });\n  }\n\n  function sendToken() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          position: \"stacked\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: email,\n          onIonChange: e => setemail(e.detail.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonButton, {\n        size: \"default\",\n        expand: \"block\",\n        onClick: sendTokenHandler,\n        color: \"primary\",\n        children: \"Send Reset Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n  function resetPasswordHandler() {\n    if (token == \"\" || newpassword == \"\") {\n      settoastType(\"danger\");\n      settoastmessage(\"All fields are mandatory\");\n      setshowToast(true);\n      return;\n    }\n\n    if (newpassword !== confirmpassword) {\n      settoastType(\"danger\");\n      settoastmessage(\"Passwords Should be Matched\");\n      setshowToast(true);\n      return;\n    }\n\n    let resStatus = 0;\n    setpasswordChanging(true);\n    fetch(\"http://localhost:5000/verifyForgotPasswordDetails\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token,\n        password: newpassword\n      })\n    }).then(res => {\n      resStatus = res.status;\n      return res.json();\n    }).then(res => {\n      if (resStatus == 200) {\n        settoastType(\"success\");\n        settoastmessage(res.message);\n        setshowToast(true);\n        setpasswordChanging(false);\n        setpasswordChanged(true);\n      } else {\n        settoastType(\"danger\");\n        settoastmessage(res.error);\n        setshowToast(true);\n        setpasswordChanging(false);\n      }\n    });\n  }\n\n  function passwordChangedSuccessfully() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-primary h3\",\n        children: \"Password Changed Successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IonButton, {\n        routerLink: \"/login\",\n        fill: \"clear\",\n        children: \"Go to Login Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this);\n  }\n\n  function resetpassword() {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          position: \"stacked\",\n          children: \"Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: token,\n          onIonChange: e => settoken(e.detail.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          position: \"stacked\",\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: newpassword,\n          onIonChange: e => setnewpassword(e.detail.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonItem, {\n        children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n          position: \"stacked\",\n          children: \"Confrim Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(IonInput, {\n          value: confirmpassword,\n          onIonChange: e => setconfirmpassword(e.detail.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonButton, {\n        size: \"default\",\n        expand: \"block\",\n        onClick: resetPasswordHandler,\n        color: \"primary\",\n        children: \"Set Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonLoading, {\n        isOpen: passwordChanging\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  }\n\n  function spinner() {\n    return /*#__PURE__*/_jsxDEV(IonSpinner, {\n      name: \"crescent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(IonPage, {\n    children: [/*#__PURE__*/_jsxDEV(IonHeader, {\n      children: /*#__PURE__*/_jsxDEV(IonToolbar, {\n        children: /*#__PURE__*/_jsxDEV(IonTitle, {\n          children: \"Forgot Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonContent, {\n      className: \"ion-padding-top\",\n      children: [/*#__PURE__*/_jsxDEV(IonSpinner, {\n        name: \"crescent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(IonToast, {\n        isOpen: showToast,\n        onDidDismiss: () => setshowToast(false),\n        message: toastMessage,\n        duration: 2000,\n        color: toastType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForgotPassword, \"etGMLdfTNcfBZtJWePkxXD6vPr4=\");\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["/home/ritik.agarwal/Desktop/GL/login_module/frontend/src/pages/ForgotPassword.tsx"],"names":["IonButton","IonContent","IonHeader","IonInput","IonItem","IonLabel","IonLoading","IonPage","IonSpinner","IonTitle","IonToast","IonToolbar","useState","ForgotPassword","token","settoken","email","setemail","newpassword","setnewpassword","confirmpassword","setconfirmpassword","showToast","setshowToast","toastMessage","settoastmessage","toastType","settoastType","emailSending","setemailSending","emailSent","setemailSent","passwordChanging","setpasswordChanging","passwordChanged","setpasswordChanged","component","renderComponent","sendToken","spinner","console","log","passwordChangedSuccessfully","resetpassword","sendTokenHandler","resStatus","fetch","method","headers","body","JSON","stringify","then","res","status","json","message","error","e","detail","value","resetPasswordHandler","password"],"mappings":"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","sourcesContent":["import { IonButton, IonContent, IonHeader, IonInput, IonItem, IonLabel, IonLoading, IonPage, IonSpinner, IonTitle, IonToast, IonToolbar } from '@ionic/react';\nimport { useState } from 'react';\n\nconst ForgotPassword: React.FC = () => {\n  const [token, settoken] = useState(\"\")\n  const [email, setemail] = useState(\"\")\n  const [newpassword, setnewpassword] = useState(\"\");\n  const [confirmpassword, setconfirmpassword] = useState(\"\");\n\n  const [showToast, setshowToast] = useState(false);\n  const [toastMessage, settoastmessage] = useState(\"\");\n  const [toastType, settoastType] = useState(\"\");\n\n  const [emailSending, setemailSending] = useState(false);\n  const [emailSent, setemailSent] = useState(false);\n  const [passwordChanging, setpasswordChanging] = useState(false);\n  const [passwordChanged, setpasswordChanged] = useState(false);\n  let component;\n  function renderComponent() {\n  \n    if (!(emailSending && emailSent))\n      component = sendToken();\n    else if (emailSending) {\n      component = spinner();\n      console.log(component);\n    }\n    else if (passwordChanged)\n      component = passwordChangedSuccessfully();\n    else if (emailSent)\n      component = resetpassword();\n\n  }\n  renderComponent();\n\n  function sendTokenHandler() {\n    if (email == \"\") {\n      settoastType(\"danger\");\n      settoastmessage(\"Email should not be empty\");\n      setshowToast(true);\n      return;\n    }\n    let resStatus = 0;\n    setemailSending(true);\n    fetch(\"http://localhost:5000/sendForgotPasswordToken\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ email })\n    }).then(res => { resStatus = res.status; return res.json() })\n      .then(res => {\n        if (resStatus == 200) {\n          settoastType(\"success\");\n          settoastmessage(res.message);\n          setshowToast(true);\n          setemailSent(true);\n          setemailSending(false);\n        }\n        else {\n          settoastType(\"danger\");\n          settoastmessage(res.error);\n          setshowToast(true);\n          setemailSending(false);\n        }\n      });\n  }\n\n  function sendToken() {\n    return (<div>\n      <IonItem>\n        <IonLabel position=\"stacked\">Email</IonLabel>\n        <IonInput value={email} onIonChange={(e) => setemail(e.detail.value)}></IonInput>\n      </IonItem>\n      <IonButton size=\"default\" expand=\"block\" onClick={sendTokenHandler} color=\"primary\">Send Reset Token</IonButton>\n    </div>\n    )\n  }\n\n  function resetPasswordHandler() {\n    if (token == \"\" || newpassword == \"\") {\n      settoastType(\"danger\");\n      settoastmessage(\"All fields are mandatory\");\n      setshowToast(true);\n      return;\n    }\n    if (newpassword !== confirmpassword) {\n      settoastType(\"danger\");\n      settoastmessage(\"Passwords Should be Matched\");\n      setshowToast(true);\n      return;\n    }\n\n    let resStatus = 0;\n    setpasswordChanging(true);\n    fetch(\"http://localhost:5000/verifyForgotPasswordDetails\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ token, password: newpassword })\n    }).then(res => { resStatus = res.status; return res.json() })\n      .then(res => {\n        if (resStatus == 200) {\n          settoastType(\"success\");\n          settoastmessage(res.message);\n          setshowToast(true);\n          setpasswordChanging(false);\n          setpasswordChanged(true);\n        }\n        else {\n          settoastType(\"danger\");\n          settoastmessage(res.error);\n          setshowToast(true);\n          setpasswordChanging(false);\n        }\n      });\n  }\n\n  function passwordChangedSuccessfully() {\n    return (\n      <div>\n        <div className=\"text-primary h3\">\n          Password Changed Successfully\n        </div>\n        <IonButton routerLink=\"/login\" fill=\"clear\">Go to Login Page</IonButton>\n      </div>\n    )\n  }\n\n  function resetpassword() {\n    <div>\n      <IonItem>\n        <IonLabel position=\"stacked\">Token</IonLabel>\n        <IonInput value={token} onIonChange={(e) => settoken(e.detail.value)}></IonInput>\n      </IonItem>\n      <IonItem>\n        <IonLabel position=\"stacked\">New Password</IonLabel>\n        <IonInput value={newpassword} onIonChange={(e) => setnewpassword(e.detail.value)}></IonInput>\n      </IonItem>\n      <IonItem>\n        <IonLabel position=\"stacked\">Confrim Password</IonLabel>\n        <IonInput value={confirmpassword} onIonChange={(e) => setconfirmpassword(e.detail.value)}></IonInput>\n      </IonItem>\n      <IonButton size=\"default\" expand=\"block\" onClick={resetPasswordHandler} color=\"primary\">Set Password</IonButton>\n      <IonLoading isOpen={passwordChanging} />\n    </div>\n  }\n\n\n  function spinner() {\n    return <IonSpinner name=\"crescent\" />\n  }\n\n\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <IonToolbar>\n          <IonTitle>Forgot Password</IonTitle>\n        </IonToolbar>\n      </IonHeader>\n      <IonContent className=\"ion-padding-top\">\n\n\n      <IonSpinner name=\"crescent\"/>\n\n        <IonToast\n          isOpen={showToast}\n          onDidDismiss={() => setshowToast(false)}\n          message={toastMessage}\n          duration={2000}\n          color={toastType}\n        />\n      </IonContent>\n\n    </IonPage>\n  );\n};\n\nexport default ForgotPassword;"]},"metadata":{},"sourceType":"module"}